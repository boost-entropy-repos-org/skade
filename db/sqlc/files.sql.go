// Code generated by sqlc. DO NOT EDIT.
// source: files.sql

package db

import (
	"context"
	"database/sql"
)

const getFile = `-- name: GetFile :one
SELECT id, filename, filesize, fileextension, uploaded_at, uploaded_by FROM files
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id int64) (File, error) {
	row := q.queryRow(ctx, q.getFileStmt, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Fileextension,
		&i.UploadedAt,
		&i.UploadedBy,
	)
	return i, err
}

const listFiles = `-- name: ListFiles :many
SELECT id, filename, filesize, fileextension, uploaded_at, uploaded_by FROM files
ORDER BY name
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.query(ctx, q.listFilesStmt, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Filesize,
			&i.Fileextension,
			&i.UploadedAt,
			&i.UploadedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveFile = `-- name: SaveFile :one
INSERT INTO files (
    filename, 
    filesize,
    fileextension,
    uploaded_at,
    uploaded_by
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, filename, filesize, fileextension, uploaded_at, uploaded_by
`

type SaveFileParams struct {
	Filename      string         `json:"filename"`
	Filesize      int32          `json:"filesize"`
	Fileextension sql.NullString `json:"fileextension"`
	UploadedAt    sql.NullTime   `json:"uploaded_at"`
	UploadedBy    sql.NullInt64  `json:"uploaded_by"`
}

func (q *Queries) SaveFile(ctx context.Context, arg SaveFileParams) (File, error) {
	row := q.queryRow(ctx, q.saveFileStmt, saveFile,
		arg.Filename,
		arg.Filesize,
		arg.Fileextension,
		arg.UploadedAt,
		arg.UploadedBy,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Fileextension,
		&i.UploadedAt,
		&i.UploadedBy,
	)
	return i, err
}
