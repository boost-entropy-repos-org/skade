// Code generated by sqlc. DO NOT EDIT.
// source: reports.sql

package db

import (
	"context"
	"database/sql"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
    file,
    malicious
) VALUES (
    $1, $2
) RETURNING id, file, malicious
`

type CreateReportParams struct {
	File      sql.NullInt64 `json:"file"`
	Malicious bool          `json:"malicious"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.queryRow(ctx, q.createReportStmt, createReport, arg.File, arg.Malicious)
	var i Report
	err := row.Scan(&i.ID, &i.File, &i.Malicious)
	return i, err
}

const getReport = `-- name: GetReport :one
SELECT id, file, malicious FROM reports
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReport(ctx context.Context, id int64) (Report, error) {
	row := q.queryRow(ctx, q.getReportStmt, getReport, id)
	var i Report
	err := row.Scan(&i.ID, &i.File, &i.Malicious)
	return i, err
}

const listReports = `-- name: ListReports :many
SELECT id, file, malicious FROM reports
ORDER BY name
`

func (q *Queries) ListReports(ctx context.Context) ([]Report, error) {
	rows, err := q.query(ctx, q.listReportsStmt, listReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(&i.ID, &i.File, &i.Malicious); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
